- name: K-means in Python
  i18n: jalpc
  url: https://github.com/amrukwa/kmeans_python
  img: /static/assets/img/landing/kpython1.png
  desc: I strived to follow the scikit-learn pipelines during the algorithm implementation. To make visualization possible, I also implemented PCA algorithm. I programmed different initialization methods, as well as Dunn Index to find the optimal number of clusters. To validate the results, I wrote k-cross validation.
  
- name:  K-means in C++
  i18n: jalpc
  url: https://github.com/amrukwa/kmeans_cpp
  img: /static/assets/img/landing/kcpp.png
  desc: For this project, I started with designing the ML canvas, which helped me define the scope of the project. I implemented most of the necessary classes by myself, letting the user choose the initialization method, distance metrics, index for finding the optimal number of classes. I also implemented the PCA algorithm alongside the k-means. The whole code was consistently unit tested.
  
- name: Shortest Path Search
  i18n: jalpc
  url: https://github.com/amrukwa/shortest_path
  img: /static/assets/img/landing/road.PNG
  desc: The project is an implementation of Dijkstra algorithm in C++. The whole program can be invoked from the command line, providing additional guidance to the user. Moreover, I automatized the unit tests, as well as releases, with the usage of custom Github Actions via workflows I prepared.
  
- name: Spam detection
  i18n: jalpc
  url: https://github.com/amrukwa/spam_detection
  img: /static/assets/img/landing/message.png
  desc: In this project I built a simple spam detection application for e-mails using a SVM model and Bag of Words. Then I deployed it with Flask and Docker.
  
- name: Mask detection
  i18n: jalpc
  url: https://github.com/amrukwa/mask_detection
  img: /static/assets/img/landing/mask.png
  desc: I built a simple Random Forest Classifier checking if on the face (previously detected by openCV DNN) there is a mask, correctly placed. The program marks the face as well as annotate the result. I deployed the model as Docker container with Flask. The app runs on images, as well as live stream video.

- name: SAUCIE
  i18n: jalpc
  url: https://github.com/amrukwa/SAUCIE
  img: /static/assets/img/landing/autoencoder.png
  desc: This is the project I did for my Bachelor thesis. I converted the model dependencies to tensorflow 2, performed unit tests, checked results reproducibility, compared them with other popular methods via a series of Polyaxon experiments. The model is deployed using streamlit.